<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Framework Minting</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <style>
    /* Basic styling â€“ adjust to mimic the Art Blocks aesthetic */
    body {
      background: #111;
      color: #fff;
      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }
    header {
      width: 100%;
      padding: 20px;
      background: #222;
      text-align: center;
      border-bottom: 1px solid #333;
    }
    h1 {
      margin: 0;
      font-size: 2em;
    }
    .container {
      margin: 40px auto;
      text-align: center;
      max-width: 600px;
      padding: 20px;
    }
    button {
      background: #f90;
      border: none;
      padding: 15px 30px;
      font-size: 1em;
      cursor: pointer;
      border-radius: 5px;
      margin: 10px;
    }
    button:disabled {
      background: #555;
      cursor: not-allowed;
    }
    #status {
      margin-top: 20px;
      font-size: 1.2em;
    }
    #walletAddress {
      margin-top: 10px;
      font-size: 0.9em;
      color: #ccc;
      cursor: pointer;
    }
    #walletAddress:hover {
      color: #f90;
      text-decoration: underline;
    }
    #nftDisplay {
        margin-top: 30px;
        padding: 20px;
        background: #222;
        border-radius: 10px;
        max-width: 500px;
    }
    
    #nftImage img {
        max-width: 100%;
        border-radius: 8px;
    }
    
    #nftInfo {
        text-align: left;
        margin-top: 15px;
        padding: 10px;
        background: #333;
        border-radius: 5px;
    }
    
    .token-lookup {
        margin: 20px 0;
        display: flex;
        gap: 10px;
        justify-content: center;
        align-items: center;
    }

    .token-lookup input {
        padding: 10px;
        font-size: 1em;
        border: 1px solid #333;
        border-radius: 5px;
        background: #222;
        color: #fff;
        width: 150px;
    }

    .token-lookup input:focus {
        outline: none;
        border-color: #f90;
    }

    /* Remove spinner buttons from number input */
    .token-lookup input::-webkit-outer-spin-button,
    .token-lookup input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    .token-lookup input[type=number] {
        -moz-appearance: textfield;
    }
    
    .description {
        margin: 1em 0;
        line-height: 1.6;
    }
    
    .description p {
        margin: 0.5em 0;
    }
    
    .description a {
        color: #f90;
        text-decoration: none;
    }
    
    .description a:hover {
        text-decoration: underline;
    }
    
    .description code {
        background: #444;
        padding: 2px 4px;
        border-radius: 3px;
        font-family: monospace;
    }
    
    .description pre {
        background: #444;
        padding: 1em;
        border-radius: 5px;
        overflow-x: auto;
    }
    
    .description blockquote {
        border-left: 3px solid #f90;
        margin: 1em 0;
        padding-left: 1em;
        color: #ccc;
    }
    
    .description ul, .description ol {
        padding-left: 2em;
        margin: 0.5em 0;
    }
  </style>
  <script>
    // Contract Details
    const contractABI = [
      {"inputs":[{"internalType":"address","name":"minterFilter","type":"address"},{"internalType":"uint256","name":"minMintFee_","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"getPriceInfo","outputs":[{"internalType":"bool","name":"isConfigured","type":"bool"},{"internalType":"uint256","name":"tokenPriceInWei","type":"uint256"},{"internalType":"string","name":"currencySymbol","type":"string"},{"internalType":"address","name":"currencyAddress","type":"address"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"address","name":"coreContract","type":"address"}],"name":"isEngineView","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"},{"internalType":"uint24","name":"maxInvocations","type":"uint24"}],"name":"manuallyLimitProjectMaxInvocations","outputs":[],"stateMutability":"nonpayable","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"maxInvocationsProjectConfig","outputs":[{"components":[{"internalType":"bool","name":"maxHasBeenInvoked","type":"bool"},{"internalType":"uint24","name":"maxInvocations","type":"uint24"}],"internalType":"struct MaxInvocationsLib.MaxInvocationsProjectConfig","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},
      {"inputs":[],"name":"minMintFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},
      {"inputs":[],"name":"minterFilterAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},
      {"inputs":[],"name":"minterType","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},
      {"inputs":[],"name":"minterVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"projectMaxHasBeenInvoked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"projectMaxInvocations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"purchase","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"payable","type":"function"},
      {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"purchaseTo","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"payable","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"setPriceProjectConfig","outputs":[{"components":[{"internalType":"uint248","name":"pricePerToken","type":"uint248"},{"internalType":"bool","name":"priceIsConfigured","type":"bool"}],"internalType":"struct SetPriceLib.SetPriceProjectConfig","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"syncProjectMaxInvocationsToCore","outputs":[],"stateMutability":"nonpayable","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"newMinMintFee","type":"uint256"}],"name":"updateMinMintFee","outputs":[],"stateMutability":"nonpayable","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"},{"internalType":"uint248","name":"pricePerTokenInWei","type":"uint248"}],"name":"updatePricePerTokenInWei","outputs":[],"stateMutability":"nonpayable","type":"function"}
    ];
    const contractAddress = "0xf5733268d28DDe96fC32f2bA8E1267Eb64120875";
    const projectId = 2;
    const coreContractAddress = "0x000009bb1740eea484f7db00000a9227e578bf96";

    // Global Variables
    let provider;
    let signer;
    let contract;
    let isWalletConnected = false;

    // Simple connect function
    async function connectWallet() {
        try {
            if (!window.ethereum) {
                throw new Error("Please install MetaMask");
            }

            // Request account access
            await window.ethereum.request({ method: "eth_requestAccounts" });
            
            provider = new ethers.providers.Web3Provider(window.ethereum);
            signer = provider.getSigner();
            const address = await signer.getAddress();

            // Update UI
            const displayName = await provider.lookupAddress(address) || address;
            const walletAddressDiv = document.getElementById("walletAddress");
            walletAddressDiv.innerText = `Connected: ${displayName}`;
            walletAddressDiv.onclick = disconnectWallet;
            walletAddressDiv.title = "Click to disconnect wallet";

            // Initialize contract
            contract = new ethers.Contract(contractAddress, contractABI, signer);
            
            isWalletConnected = true;
            document.getElementById("actionButton").textContent = "Mint NFT";
            document.getElementById("status").innerText = "Wallet connected successfully!";

            // Setup event listeners
            window.ethereum.on('accountsChanged', handleAccountsChanged);
            window.ethereum.on('chainChanged', () => window.location.reload());
        } catch (error) {
            console.error("Connection error:", error);
            document.getElementById("status").innerText = "Connection failed: " + error.message;
        }
    }

    // Simple disconnect function
    function disconnectWallet() {
        if (confirm("Are you sure you want to disconnect your wallet?")) {
            isWalletConnected = false;
            provider = null;
            signer = null;
            contract = null;
            
            document.getElementById("actionButton").textContent = "Connect Wallet";
            document.getElementById("walletAddress").innerText = "";
            document.getElementById("status").innerText = "Wallet disconnected";
            
            window.location.reload();
        }
    }

    // Add handler for account changes
    async function handleAccountsChanged(accounts) {
        if (accounts.length === 0) {
            // User disconnected their wallet
            disconnectWallet();
        } else {
            // Account changed, update the display
            const newDisplayName = await provider.lookupAddress(accounts[0]) || accounts[0];
            document.getElementById("walletAddress").innerText = `Connected: ${newDisplayName}`;
        }
    }

    // Update the displayNFT function to better handle the response
    async function displayNFT(tokenId) {
        try {
            document.getElementById("status").innerText = "Fetching token metadata...";
            
            // Construct Art Blocks token URI
            const tokenURI = `https://token.artblocks.io/0x000009bb1740eea484f7db00000a9227e578bf96/${tokenId}`;
            
            // Fetch the metadata
            const response = await fetch(tokenURI);
            if (!response.ok) {
                throw new Error(`Failed to fetch token metadata: ${response.status} ${response.statusText}`);
            }
            
            const metadata = await response.json();
            console.log('Raw Art Blocks Metadata:', metadata); // Detailed logging
            
            // Show the container
            const nftDisplay = document.getElementById('nftDisplay');
            nftDisplay.style.display = 'block';
            
            // Update status
            document.getElementById("status").innerText = "Metadata retrieved successfully!";
            
            // Display the NFT (handle both live render and static image)
            const nftImage = document.getElementById('nftImage');
            if (metadata.animation_url) {
                console.log('Animation URL found:', metadata.animation_url);
                nftImage.innerHTML = `
                    <iframe 
                        src="${metadata.animation_url}" 
                        frameborder="0" 
                        width="100%" 
                        height="400px"
                        style="border-radius: 8px;"
                        allowfullscreen
                    ></iframe>`;
            } else if (metadata.image) {
                console.log('Static image found:', metadata.image);
                nftImage.innerHTML = `<img src="${metadata.image}" alt="Your NFT" />`;
            }
            
            // Display simplified metadata with markdown parsing
            const nftInfo = document.getElementById('nftInfo');
            nftInfo.innerHTML = `
                <h3>${metadata.name || 'Untitled'}</h3>
                <div class="description">
                    ${marked.parse(metadata.description || '')}
                </div>
                <p><strong>Token ID:</strong> ${tokenId}</p>
                <p><strong>Artist:</strong> ${metadata.artist || 'Unknown'}</p>
                ${metadata.features ? `
                    <h4>Features:</h4>
                    <ul>
                        ${Object.entries(metadata.features).map(([key, value]) => 
                            `<li><strong>${key}:</strong> ${value}</li>`
                        ).join('')}
                    </ul>
                ` : ''}
            `;
        } catch (error) {
            console.error("Error displaying NFT:", error);
            document.getElementById("status").innerText = "Error: " + error.message;
        }
    }

    // Initialize when the page loads
    document.addEventListener('DOMContentLoaded', function() {
        const actionButton = document.getElementById("actionButton");
        const lookupButton = document.getElementById("lookupToken");
        const tokenInput = document.getElementById("tokenIdInput");

        if (!actionButton || !lookupButton || !tokenInput) {
            console.error("Could not find required elements");
            return;
        }

        actionButton.addEventListener("click", async () => {
            if (!isWalletConnected) {
                await connectWallet();
            } else {
                // Mint NFT Logic
                if (!contract) return;

                try {
                    document.getElementById("status").innerText = "Minting in progress...";
                    const tx = await contract.purchase(projectId, coreContractAddress, { 
                        value: ethers.utils.parseEther("0.0015")
                    });
                    
                    document.getElementById("status").innerText = "Transaction submitted. Waiting for confirmation...";
                    const receipt = await tx.wait();
                    
                    const coreInterface = new ethers.utils.Interface([
                        "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)"
                    ]);
                    
                    const transferEvent = receipt.logs
                        .map(log => {
                            try {
                                return coreInterface.parseLog(log);
                            } catch (e) {
                                return null;
                            }
                        })
                        .find(event => event && event.name === 'Transfer');

                    if (transferEvent) {
                        const tokenId = transferEvent.args.tokenId.toString();
                        document.getElementById("status").innerText = "Mint successful! Token ID: " + tokenId;
                        await displayNFT(tokenId);
                    } else {
                        document.getElementById("status").innerText = "Mint successful, but couldn't find token ID";
                    }
                } catch (error) {
                    console.error("Minting error:", error);
                    document.getElementById("status").innerText = "Mint failed: " + error.message;
                }
            }
        });

        // Token lookup button logic
        lookupButton.addEventListener("click", async () => {
            console.log("Lookup button clicked");
            const tokenId = tokenInput.value.trim();
            
            if (!tokenId) {
                document.getElementById("status").innerText = "Please enter a token ID";
                return;
            }
            
            try {
                const tokenNumber = parseInt(tokenId);
                if (isNaN(tokenNumber) || tokenNumber < 0) {
                    throw new Error("Please enter a valid token ID");
                }
                
                await displayNFT(tokenId);
            } catch (error) {
                document.getElementById("status").innerText = error.message;
            }
        });

        // Enter key support
        tokenInput.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                lookupButton.click();
            }
        });
    });
  </script>
</head>
<body>
  <header>
    <h1>Framework Minting</h1>
  </header>
  
  <div class="container">
    <button id="actionButton">Connect Wallet</button>
    <div id="walletAddress"></div>
    <div class="token-lookup">
        <input type="number" id="tokenIdInput" placeholder="Enter Token ID" min="0">
        <button id="lookupToken">Look Up Token</button>
    </div>
    <div id="status"></div>
    <div id="nftDisplay" style="display: none;">
        <h2>Your NFT</h2>
        <div id="nftImage" style="margin: 20px 0;"></div>
        <div id="nftInfo"></div>
    </div>
  </div>
</body>
</html>