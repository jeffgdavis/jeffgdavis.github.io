<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Framework Minting</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <style>
    /* Keep minimal container styles */
    .mint-container {
        text-align: center;
    }

    #nftDisplay {
        position: relative;
        padding-top: 100%;
        overflow: hidden;
    }

    #nftImage iframe,
    #nftImage img {
        border: none;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    /* Input field - keep only essential styles */
    #tokenIdInput {
        margin-top: 15px;
        text-align: center;
        padding: 15px;
        border: 1px solid #000;
        outline: none;
        width: 100%;
        box-sizing: border-box;
    }

    /* Buttons - keep only essential styles */
    button {
        margin-top: 10px;
        cursor: pointer;
        width: 100%;
    }

    /* Status and wallet info */
    #status,
    #walletAddress {
        margin-top: 10px;
        text-align: center;
    }

    /* Hide metadata by default */
    #nftInfo {
        display: none;
    }

    /* Remove number input spinners */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type="number"] {
        -moz-appearance: textfield; /* Firefox */
    }
  </style>
  <script>
    // Contract Details
    const contractABI = [
      {"inputs":[{"internalType":"address","name":"minterFilter","type":"address"},{"internalType":"uint256","name":"minMintFee_","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"getPriceInfo","outputs":[{"internalType":"bool","name":"isConfigured","type":"bool"},{"internalType":"uint256","name":"tokenPriceInWei","type":"uint256"},{"internalType":"string","name":"currencySymbol","type":"string"},{"internalType":"address","name":"currencyAddress","type":"address"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"address","name":"coreContract","type":"address"}],"name":"isEngineView","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"},{"internalType":"uint24","name":"maxInvocations","type":"uint24"}],"name":"manuallyLimitProjectMaxInvocations","outputs":[],"stateMutability":"nonpayable","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"maxInvocationsProjectConfig","outputs":[{"components":[{"internalType":"bool","name":"maxHasBeenInvoked","type":"bool"},{"internalType":"uint24","name":"maxInvocations","type":"uint24"}],"internalType":"struct MaxInvocationsLib.MaxInvocationsProjectConfig","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},
      {"inputs":[],"name":"minMintFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},
      {"inputs":[],"name":"minterFilterAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},
      {"inputs":[],"name":"minterType","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},
      {"inputs":[],"name":"minterVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"projectMaxHasBeenInvoked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"projectMaxInvocations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"purchase","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"payable","type":"function"},
      {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"purchaseTo","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"payable","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"setPriceProjectConfig","outputs":[{"components":[{"internalType":"uint248","name":"pricePerToken","type":"uint248"},{"internalType":"bool","name":"priceIsConfigured","type":"bool"}],"internalType":"struct SetPriceLib.SetPriceProjectConfig","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"}],"name":"syncProjectMaxInvocationsToCore","outputs":[],"stateMutability":"nonpayable","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"newMinMintFee","type":"uint256"}],"name":"updateMinMintFee","outputs":[],"stateMutability":"nonpayable","type":"function"},
      {"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"},{"internalType":"address","name":"coreContract","type":"address"},{"internalType":"uint248","name":"pricePerTokenInWei","type":"uint248"}],"name":"updatePricePerTokenInWei","outputs":[],"stateMutability":"nonpayable","type":"function"}
    ];
    const contractAddress = "0xf5733268d28DDe96fC32f2bA8E1267Eb64120875";
    const projectId = 0;
    const coreContractAddress = "0x000009bb1740eea484f7db00000a9227e578bf96";

    // Global Variables
    let provider;
    let signer;
    let contract;
    let isWalletConnected = false;

    // Simple connect function
    async function connectWallet() {
        try {
            if (!window.ethereum) {
                throw new Error("Please install MetaMask or use a Web3-enabled browser");
            }

            // Request account access
            await window.ethereum.request({ method: "eth_requestAccounts" });
            
            provider = new ethers.providers.Web3Provider(window.ethereum);
            signer = provider.getSigner();
            const address = await signer.getAddress();

            // Update UI
            const displayName = await provider.lookupAddress(address) || address;
            const walletAddressDiv = document.getElementById("walletAddress");
            walletAddressDiv.innerText = `Connected: ${displayName}`;
            walletAddressDiv.onclick = disconnectWallet;
            walletAddressDiv.title = "Click to disconnect wallet";

            // Initialize contract
            contract = new ethers.Contract(contractAddress, contractABI, signer);
            
            isWalletConnected = true;
            document.getElementById("actionButton").textContent = "Mint NFT";
            document.getElementById("status").innerText = "Wallet connected successfully!";

            // Setup event listeners
            window.ethereum.on('accountsChanged', handleAccountsChanged);
            window.ethereum.on('chainChanged', () => window.location.reload());
        } catch (error) {
            console.error("Wallet connection error:", error);
            document.getElementById("status").innerText = 
                `Connection failed: ${error.message}. Please refresh the page to try again.`;
        }
    }

    // Simple disconnect function
    function disconnectWallet() {
        if (confirm("Are you sure you want to disconnect your wallet?")) {
            isWalletConnected = false;
            provider = null;
            signer = null;
            contract = null;
            
            document.getElementById("actionButton").textContent = "Connect Wallet";
            document.getElementById("walletAddress").innerText = "";
            document.getElementById("status").innerText = "Wallet disconnected";
            
            window.location.reload();
        }
    }

    // Add handler for account changes
    async function handleAccountsChanged(accounts) {
        if (accounts.length === 0) {
            // User disconnected their wallet
            disconnectWallet();
        } else {
            // Account changed, update the display
            const newDisplayName = await provider.lookupAddress(accounts[0]) || accounts[0];
            document.getElementById("walletAddress").innerText = `Connected: ${newDisplayName}`;
        }
    }

    // Update the displayNFT function to better handle the response
    async function displayNFT(tokenId) {
        try {
            document.getElementById("status").innerText = "Fetching token metadata...";
            
            // Construct Art Blocks token URI
            const tokenURI = `https://token.artblocks.io/0x000009bb1740eea484f7db00000a9227e578bf96/${tokenId}`;
            
            // Fetch the metadata
            const response = await fetch(tokenURI);
            if (!response.ok) {
                throw new Error(`Failed to fetch token metadata: ${response.status} ${response.statusText}`);
            }
            
            const metadata = await response.json();
            console.log('Raw Art Blocks Metadata:', metadata); // Detailed logging
            
            // Show the container
            const nftDisplay = document.getElementById('nftDisplay');
            nftDisplay.style.display = 'block';
            
            // Update status
            document.getElementById("status").innerText = "Metadata retrieved successfully!";
            
            // Display the NFT (handle both live render and static image)
            const nftImage = document.getElementById('nftImage');
            if (metadata.animation_url) {
                console.log('Animation URL found:', metadata.animation_url);
                nftImage.innerHTML = `
                    <iframe 
                        src="${metadata.animation_url}" 
                        frameborder="0" 
                        width="1008"
                        height="1008"
                        style="width: 504px; height: 504px;"
                        allowfullscreen
                        allow="accelerometer; gyroscope"
                    ></iframe>`;
            } else if (metadata.image) {
                console.log('Static image found:', metadata.image);
                nftImage.innerHTML = `<img src="${metadata.image}" alt="Your NFT" style="width: 504px; height: 504px;" />`;
            }
            
            // Display simplified metadata with markdown parsing
            const nftInfo = document.getElementById('nftInfo');
            nftInfo.innerHTML = `
                <h3>${metadata.name || 'Untitled'}</h3>
                <div class="description">
                    ${marked.parse(metadata.description || '')}
                </div>
                <p><strong>Token ID:</strong> ${tokenId}</p>
                <p><strong>Artist:</strong> ${metadata.artist || 'Unknown'}</p>
                ${metadata.features ? `
                    <h4>Features:</h4>
                    <ul>
                        ${Object.entries(metadata.features).map(([key, value]) => 
                            `<li><strong>${key}:</strong> ${value}</li>`
                        ).join('')}
                    </ul>
                ` : ''}
            `;

            // Show expand button after successful load
            document.getElementById('expandButton').style.display = 'block';
        } catch (error) {
            console.error("Error displaying NFT:", error);
            document.getElementById("status").innerText = "Error: " + error.message;
            document.getElementById('expandButton').style.display = 'none';
        }
    }

    // Initialize when the page loads
    document.addEventListener('DOMContentLoaded', function() {
        const actionButton = document.getElementById("actionButton");
        const lookupButton = document.getElementById("lookupToken");
        const tokenInput = document.getElementById("tokenIdInput");

        if (!actionButton || !lookupButton || !tokenInput) {
            console.error("Could not find required elements");
            return;
        }

        actionButton.addEventListener("click", async () => {
            if (!isWalletConnected) {
                await connectWallet();
            } else {
                // Mint NFT Logic
                if (!contract) return;

                try {
                    document.getElementById("status").innerText = "Minting in progress...";
                    const tx = await contract.purchase(projectId, coreContractAddress, { 
                        value: ethers.utils.parseEther("0.0015")
                    });
                    
                    document.getElementById("status").innerText = "Transaction submitted. Waiting for confirmation...";
                    const receipt = await tx.wait();
                    
                    const coreInterface = new ethers.utils.Interface([
                        "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)"
                    ]);
                    
                    const transferEvent = receipt.logs
                        .map(log => {
                            try {
                                return coreInterface.parseLog(log);
                            } catch (e) {
                                return null;
                            }
                        })
                        .find(event => event && event.name === 'Transfer');

                    if (transferEvent) {
                        const tokenId = transferEvent.args.tokenId.toString();
                        document.getElementById("status").innerText = "Mint successful! Token ID: " + tokenId;
                        await displayNFT(tokenId);
                    } else {
                        document.getElementById("status").innerText = "Mint successful, but couldn't find token ID";
                    }
                } catch (error) {
                    console.error("Minting error:", error);
                    document.getElementById("status").innerText = "Mint failed: " + error.message;
                }
            }
        });

        // Token lookup button logic
        lookupButton.addEventListener("click", async () => {
            console.log("Lookup button clicked");
            const tokenId = tokenInput.value.trim();
            
            if (!tokenId) {
                document.getElementById("status").innerText = "Please enter a token ID";
                return;
            }
            
            try {
                const tokenNumber = parseInt(tokenId);
                if (isNaN(tokenNumber) || tokenNumber < 0) {
                    throw new Error("Please enter a valid token ID");
                }
                
                await displayNFT(tokenId);
            } catch (error) {
                document.getElementById("status").innerText = error.message;
            }
        });

        // Enter key support
        tokenInput.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                lookupButton.click();
            }
        });
    });

    // Make functions globally available for Squarespace
    window.connectWallet = connectWallet;
    window.disconnectWallet = disconnectWallet;
    window.displayNFT = displayNFT;

    // Add initialization check function
    function initializeElements() {
        const required = [
            "actionButton",
            "tokenIdInput",
            "lookupToken",
            "status",
            "walletAddress",
            "nftDisplay",
            "nftImage",
            "nftInfo"
        ];
        
        const missing = required.filter(id => !document.getElementById(id));
        if (missing.length > 0) {
            console.error('Missing required elements:', missing);
            return false;
        }
        return true;
    }

    // Update the initialization logic
    window.addEventListener('load', function() {
        if (!initializeElements()) {
            console.error('Required elements not found. Initialization cancelled.');
            return;
        }

        try {
            const actionButton = document.getElementById("actionButton");
            const lookupButton = document.getElementById("lookupToken");
            const tokenInput = document.getElementById("tokenIdInput");

            // Setup action button
            actionButton.addEventListener("click", async () => {
                if (!isWalletConnected) {
                    await connectWallet();
                } else {
                    // Existing mint logic...
                }
            });

            // Setup lookup button
            lookupButton.addEventListener("click", async () => {
                const tokenId = tokenInput.value.trim();
                if (!tokenId) {
                    document.getElementById("status").innerText = "Please enter a token ID";
                    return;
                }
                try {
                    await displayNFT(tokenId);
                } catch (error) {
                    document.getElementById("status").innerText = error.message;
                }
            });

            // Setup enter key support
            tokenInput.addEventListener("keypress", (event) => {
                if (event.key === "Enter") {
                    event.preventDefault();
                    lookupButton.click();
                }
            });

            // Display token #0 on load but don't fill the input
            displayNFT('0');

        } catch (error) {
            console.error('Error during initialization:', error);
        }
    });

    // Update the expand function
    function expandView() {
        // Get token ID from input or use '0' if empty
        const tokenId = document.getElementById('tokenIdInput').value.trim() || '0';
        window.open(`https://generator.artblocks.io/${coreContractAddress}/${tokenId}`, '_blank');
    }
  </script>
</head>
<body>
  <div class="mint-container">
    <!-- Square display container -->
    <div id="nftDisplay">
        <div id="nftImage"></div>
    </div>

    <!-- Input field -->
    <input 
        type="number" 
        id="tokenIdInput" 
        placeholder="Enter a value from 0-100" 
        min="0"
        max="100">

    <!-- Buttons -->
    <button id="lookupToken" class="sqs-button-element--secondary">FIND</button>
    <button id="expandButton" onclick="expandView()" class="sqs-button-element--secondary" style="display: none;">EXPAND</button>
    <button id="actionButton" class="sqs-button-element--secondary">CONNECT WALLET</button>

    <!-- Status and info -->
    <div id="status"></div>
    <div id="walletAddress"></div>
    <div id="nftInfo"></div>
  </div>
</body>
</html>